/* Autogenerated file. Do not edit manually. */

import { Account } from "starknet";
import { DojoProvider, getContractByName } from "@dojoengine/core";
import { getEvents } from "@dojoengine/utils";
import { Slot } from "@/app/roulette/internals/Board/domain";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const contract_name = "actions";

    const selfMint = async ({ account }: { account: Account }) => {
      console.log(account, "erc_systems", "mint_", [
        account.address,
        100 * 10 ** 6,
        0,
      ]);
      const tx = await provider.execute(account, "erc_systems", "mint_", [
        account.address,
        100 * 10 ** 6,
        0,
      ]);
      await account.waitForTransaction(tx.transaction_hash, {
        retryInterval: 100,
      });
    };
    const bet = async ({
      account,
      choices,
    }: {
      account: Account;
      choices: Slot[];
    }) => {
      let nonZeroChoices: any = [];
      let nonZeroChoicesBetAmount: any = [];

      const aggregates = choices.forEach((choices, index) => {
        if (choices.coins.length > 0) {
          let aggregateOfCoins = 0;
          choices.coins.forEach((coin) => {
            const adjustedCoin = coin * 1000000;
            aggregateOfCoins += adjustedCoin;
          });
          nonZeroChoices.push(index + 1);
          nonZeroChoicesBetAmount.push(aggregateOfCoins);
        }
      });

      // aggregate the amounts
      const totalBetAmount = nonZeroChoicesBetAmount.reduce(
        (a: any, b: any) => a + b,
        0
      );
      // approve
      let tx = await provider.execute(account, "erc_systems", "approve", [
        getContractByName(provider.manifest, "actions").address,
        totalBetAmount,
        0,
      ]);

      let events = getEvents(
        await account.waitForTransaction(tx.transaction_hash, {
          retryInterval: 100,
        })
      );
      // bet
      console.log(...nonZeroChoices);
      tx = await provider.execute(account, "actions", "move", [
        process.env.NEXT_PUBLIC_GAME_ID,
        nonZeroChoices.length,
        ...nonZeroChoices,
        nonZeroChoicesBetAmount.length,
        ...nonZeroChoicesBetAmount,
      ]);

      events = getEvents(
        await account.waitForTransaction(tx.transaction_hash, {
          retryInterval: 100,
        })
      );

      return totalBetAmount;
    };

    return { bet, selfMint };
  }
  return {
    actions: actions(),
  };
}
